---
- name: Убедиться, что установлен curl
  ansible.builtin.apt:
    name: curl
    state: present
  become: yes
  when: ansible_os_family == 'Debian'

- name: Скачать манифест MetalLB через curl
  ansible.builtin.command: >
    curl -fsSL -o /tmp/metallb-native.yaml
    https://raw.githubusercontent.com/metallb/metallb/{{ metallb_version }}/config/manifests/metallb-native.yaml
  args:
    creates: /tmp/metallb-native.yaml

- name: Применить манифест MetalLB через kubectl
  ansible.builtin.command: kubectl apply -f /tmp/metallb-native.yaml
  args:
    creates: /tmp/.metallb_manifest_applied
  register: kubectl_apply
  changed_when: "'created' in kubectl_apply.stdout or 'configured' in kubectl_apply.stdout"

- name: Отметить, что манифест применён
  ansible.builtin.file:
    path: /tmp/.metallb_manifest_applied
    state: touch
    mode: '0644'
  when: kubectl_apply.changed

# === ДОБАВЛЕНО: Ожидание регистрации CRD ===
- name: Ожидание регистрации CRD IPAddressPool
  kubernetes.core.k8s_info:
    kind: CustomResourceDefinition
    name: ipaddresspools.metallb.io
  register: crd_status
  until: crd_status.resources | length > 0
  retries: 20
  delay: 3
  ignore_errors: yes

- name: Ожидание регистрации CRD L2Advertisement
  kubernetes.core.k8s_info:
    kind: CustomResourceDefinition
    name: l2advertisements.metallb.io
  register: crd_status_l2
  until: crd_status_l2.resources | length > 0
  retries: 20
  delay: 3
  ignore_errors: yes
# === КОНЕЦ ДОБАВЛЕННОГО ===

- name: Ожидание запуска MetalLB controller
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: metallb-system
    label_selectors:
      - "app=metallb,component=controller"
  register: controller_pods
  until: >
    (controller_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length) > 0
  retries: 30
  delay: 5

- name: Создать IPAddressPool для MetalLB
  kubernetes.core.k8s:
    kubeconfig: "{{ k3s_kubeconfig_path | default(omit) }}"
    state: present
    definition:
      apiVersion: metallb.io/v1beta1
      kind: IPAddressPool
      metadata:
        name: default-pool
        namespace: metallb-system
      spec:
        addresses:
          - "{{ metallb_ip_range_start }}-{{ metallb_ip_range_end }}"

- name: Создать L2Advertisement (обязательно для активации выдачи IP!)
  kubernetes.core.k8s:
    kubeconfig: "{{ k3s_kubeconfig_path | default(omit) }}"
    state: present
    definition:
      apiVersion: metallb.io/v1beta1
      kind: L2Advertisement
      metadata:
        name: default-adv
        namespace: metallb-system
      spec:
        ipAddressPools:
          - default-pool

# === Разрешаем совместное использование IP для сервисов ===

- name: Разрешить общий IP для traefik
  kubernetes.core.k8s:
    kubeconfig: "{{ k3s_kubeconfig_path | default(omit) }}"
    state: present
    kind: Service
    namespace: kube-system
    name: traefik
    merge_type: strategic-merge
    definition:
      metadata:
        annotations:
          metallb.universe.tf/allow-shared-ip: shared-group-1

- name: Разрешить общий IP для immich-nginx-svc
  kubernetes.core.k8s:
    kubeconfig: "{{ k3s_kubeconfig_path | default(omit) }}"
    state: present
    kind: Service
    namespace: immich
    name: immich-nginx-svc
    merge_type: strategic-merge
    definition:
      metadata:
        annotations:
          metallb.universe.tf/allow-shared-ip: shared-group-1

- name: Проверить существование сервиса seaweedfs-s3
  kubernetes.core.k8s_info:
    kubeconfig: "{{ k3s_kubeconfig_path | default(omit) }}"
    kind: Service
    namespace: seaweedfs
    name: seaweedfs-s3
  register: s3_svc_exists

- name: Разрешить общий IP для seaweedfs-s3 (в правильном неймспейсе!)
  kubernetes.core.k8s:
    kubeconfig: "{{ k3s_kubeconfig_path | default(omit) }}"
    state: present
    kind: Service
    namespace: seaweedfs
    name: seaweedfs-s3
    merge_type: strategic-merge
    definition:
      metadata:
        annotations:
          metallb.universe.tf/allow-shared-ip: shared-group-1
  when: s3_svc_exists.resources | length > 0
